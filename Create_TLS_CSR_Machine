<# 
.SYNOPSIS 
Generates a Certificate Signing Request file from the local machine context of the device the script is run on.
 
.DESCRIPTION
Tested platforms:
- Windows 10 with PowerShell 5.0
 
.NOTES
Version        : 1.0
File Name      : Create_TLS_CSR.ps1
Author         : Charles Hamby
Prerequisite   : PowerShell V5 over Win10/Server 2012.
 
.LINK 
 
.EXAMPLE 
    .\Create_TLS_CSR.ps1
     
    Generates a CSR based on the command line parameters entered at script execution.
     
.EXAMPLE
    .\Create_TLS_CSR.ps1 -SANs "<SanValue>"
     
    Generates a CSR with an added Subject Alternative Name
 
.EXAMPLE
    .\Create_TLS_CSR.ps1 -SANs "<San Value 1>, <San Value 2>, <San Value 3>"
     
    Generates a CSR with an multiple Subject Alternative Names
 
 
#>
[CmdletBinding()]
        param (
             
            [Parameter(Mandatory=$false)][String]$SANs=""
        );
 
#-----------------------------------------------------------[Pre-Req Check]------------------------------------------------------------
 
if (!([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
     
        Write-Host "Administrator priviliges are required. Please restart this script with elevated rights." -ForegroundColor Red;
        Pause;
        Throw "Administrator priviliges are required. Please restart this script with elevated rights.";
};
 
         
#-----------------------------------------------------------[Functions]------------------------------------------------------------
 
Function Create-TLSCSR {
     
    # Commandline parameters
    [CmdletBinding()]
        param (
 
            [Parameter(Mandatory=$true)][String]$CommonName="",
            [Parameter(Mandatory=$true)][String]$OrganizationUnit="",
            [Parameter(Mandatory=$true)][String]$TeamDL="",
            [Parameter(Mandatory=$true)][String]$Path=""
 
    );
 
$CSRPath = "$Path\$($CommonName)_.csr"
$INFPath = "$Path\$($CommonName)_.inf"
$Signature = '$Windows NT$'
$INF =
@"
[Version]
Signature= "$Signature"
[NewRequest]
Subject = "CN=$CommonName, OU=$OrganizationUnit, OU=$TeamDL, O=Tesla Inc, L=Palo Alto, S=California, C=US"
KeySpec = 1
KeyLength = 2048
MachineKeySet = TRUE
HashAlgorithm = SHA256
Exportable = TRUE `r `n
"@
 
If (!$SANs) {
 
    $INF +=  "[Extensions] `r `n";
    $INF +=  "2.5.29.17 = `"{text}`" `r `n";
    $INF += "_continue_=`"DNS=$CommonName&`" `r `n";
 
}
elseif ($SANs) {
 
    $INF +=  "[Extensions] `r `n"
    $INF +=  "2.5.29.17 = `"{text}`" `r `n";
    $INF += "_continue_=`"DNS=$CommonName&`" `r `n";
 
 
    # Get SAN's and Parse
    $SANArray = @()
 
    # Split based off comma
    $SANArray = $SANs.Split(",");       
         
    Foreach ($SAN in $SANArray) {
             
        If ($SAN -ne $SANArray[-1]) {
                 
            $INF += "_continue_=`"DNS=$SAN&`" `r `n";
 
        }
        else {
 
            $INF +=  "_continue_=`"DNS=$SAN`" `r`n";
             
        };
    };
};
 
$INF | out-file -filepath $INFPath -force
certreq -new $INFPath $CSRPath
 
};
 
#-----------------------------------------------------------[Execution]------------------------------------------------------------
 
# Generate CSR File
Create-TLSCSR;
